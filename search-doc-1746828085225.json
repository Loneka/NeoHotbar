{"searchDocs":[{"title":"Customization","type":0,"sectionRef":"#","url":"/neohotbar/docs/customization","content":"","keywords":"","version":"Next"},{"title":"Custom buttons​","type":1,"pageTitle":"Customization","url":"/neohotbar/docs/customization#custom-buttons","content":" You can add your own custom buttons to NeoHotbar, like to open a backpack for example!  First, find an image to use for the button's icon. Next, let's add the button to NeoHotbar. We'll use the image's asset ID and a callback function to tell NeoHotbar what to do when it's clicked. local NeoHotbar = require(path.to.NeoHotbar) NeoHotbar:AddCustomButton(&quot;rbxassetid://0&quot;, function() print('Button was clicked!') end) You're done! You can hook this button up to whatever you want in your game.  ","version":"Next","tagName":"h2"},{"title":"Custom UI​","type":1,"pageTitle":"Customization","url":"/neohotbar/docs/customization#custom-ui","content":" NeoHotbar's UI is fully overridable, so you can customize it however you like!  Copy over the default UI to use as a template. The folder can be found in NeoHotbar/DefaultInstances.Modify all you like, you have full control!Call :OverrideGui() on NeoHotbar, passing your folder as an argument.  ","version":"Next","tagName":"h2"},{"title":"Dynamic attributes​","type":1,"pageTitle":"Customization","url":"/neohotbar/docs/customization#dynamic-attributes","content":" You can also plug into dynamic attributes to have your UI react to changes.  For example, the ToolButton component has an attribute called Equipped. Here's what a code snippet for that might look like:  local ToolButton = path.to.ToolButton local function ReactToEquipped(Equipped: boolean) print(`Equipped: {Equipped}`) end ToolButton:GetAttributeChangedSignal(&quot;Equipped&quot;):Connect(function() ReactToEquipped(ToolButton:GetAttribute(&quot;Equipped&quot;)) end) ReactToEquipped(ToolButton:GetAttribute(&quot;Equipped&quot;))   You may also choose to use a UI library like Fusion to handle reactive logic. Fun fact, NeoHotbar uses Fusion behind the scenes itself.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Customization","url":"/neohotbar/docs/customization#properties","content":" You might want to change simpler things, like temporarily hiding the hotbar or locking tool reordering. You can set those properties with the functions listed here:  SetEnabledSetManagementEnabledSetToolTipsEnabledSetContextMenuEnabled ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/neohotbar/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/neohotbar/docs/intro#installation","content":" ","version":"Next","tagName":"h2"},{"title":"Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"/neohotbar/docs/intro#roblox-studio","content":" Get NeoHotbar from the toolbox.Place the loader into StarterPlayer/StarterPlayerScriptsIf you want to use the API, you can take the module out of the loader script.  ","version":"Next","tagName":"h3"},{"title":"Rojo + Wally​","type":1,"pageTitle":"Getting Started","url":"/neohotbar/docs/intro#rojo--wally","content":" Add NeoHotbar as a Wally dependency.Run :Start() on NeoHotbar from a client-side script.    That's all you need to do to use NeoHotbar! Now you can leave it as-is or get into customization. ✨ ","version":"Next","tagName":"h3"},{"title":"NeoHotbar","type":0,"sectionRef":"#","url":"/neohotbar/api/NeoHotbar","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#functions","content":" ","version":null,"tagName":"h2"},{"title":"Start​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#Start","content":"&lt;/&gt; NeoHotbar:Start() → () Initializes NeoHotbar and deploys its UI with default settings.  ","version":null,"tagName":"h3"},{"title":"SetEnabled​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#SetEnabled","content":"&lt;/&gt; NeoHotbar:SetEnabled( Enabled: boolean-- Whether or not to enable NeoHotbar. ) → () Sets whether NeoHotbar or not is enabled. Disabling hides the hotbar and turns off keybinds.  ","version":null,"tagName":"h3"},{"title":"SetToolTipsEnabled​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#SetToolTipsEnabled","content":"&lt;/&gt; NeoHotbar:SetToolTipsEnabled( Enabled: boolean-- Whether or not to enable. ) → () Sets whether or not ToolTips are enabled.  ","version":null,"tagName":"h3"},{"title":"SetManagementEnabled​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#SetManagementEnabled","content":"&lt;/&gt; NeoHotbar:SetManagementEnabled( Enabled: boolean-- Whether or not to enable. ) → () Sets whether or not players can rearrange the tools in their hotbar.  ","version":null,"tagName":"h3"},{"title":"SetContextMenuEnabled​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#SetContextMenuEnabled","content":"&lt;/&gt; NeoHotbar:SetContextMenuEnabled( Enabled: boolean-- Whether or not to enable. ) → () Sets whether or not players can open the context menu. (the one that appears when you right click on a tool)  ","version":null,"tagName":"h3"},{"title":"OverrideGui​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#OverrideGui","content":"&lt;/&gt; NeoHotbar:OverrideGui( CustomGuiSet: Folder ,-- The parent folder containing your custom Gui objects. DefaultEffectsEnabled: boolean?-- Whether or not to enable NeoHotbar's built-in UI effects. Not compatible with ultra-customized themes. ) → () Overrides NeoHotbar's UI with a new set of Gui objects.  ","version":null,"tagName":"h3"},{"title":"ResetGui​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#ResetGui","content":"&lt;/&gt; NeoHotbar:ResetGui() → () Reset NeoHotbar's UI back to the default.  ","version":null,"tagName":"h3"},{"title":"AddCustomButton​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#AddCustomButton","content":"&lt;/&gt; NeoHotbar:AddCustomButton( ButtonName: string,-- The name/identifier of the button to be added. IconImage: string,-- The image URI to be used on the button icon. E.g. &quot;rbxassetid://&quot;. Callback: any,-- The function called upon button activation (click/touch/etc). GamepadKeybind: EnumItem? -- A gamepad keycode to trigger your custom button. ) → () Adds a custom button to the hotbar, prepended to the left-most side.  ","version":null,"tagName":"h3"},{"title":"RemoveCustomButton​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#RemoveCustomButton","content":"&lt;/&gt; NeoHotbar:RemoveCustomButton( ButtonName: string-- The name of the button to be removed. ) → () Removes the specified custom button from the hotbar.  ","version":null,"tagName":"h3"},{"title":"FindCustomButton​","type":1,"pageTitle":"NeoHotbar","url":"/neohotbar/api/NeoHotbar#FindCustomButton","content":"&lt;/&gt; NeoHotbar:FindCustomButton( ButtonName: string-- The name of the button to be searched for. ) → () Returns the specified custom button if found. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}